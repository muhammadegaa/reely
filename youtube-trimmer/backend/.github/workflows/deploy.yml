name: Deploy Reely to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: reely
  ECS_SERVICE: reely-production-api
  ECS_CLUSTER: reely-production-cluster
  ECS_TASK_DEFINITION: ecs-task-definition.json

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: testing
      run: |
        python -m pytest tests/ -v
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r . -x tests/
        safety check

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: reely-api
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Run database migrations
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get the task ARN of a running task
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --desired-status RUNNING --query 'taskArns[0]' --output text)
        
        if [ "$TASK_ARN" != "None" ]; then
          # Run database migrations
          aws ecs execute-command \
            --cluster $ECS_CLUSTER \
            --task $TASK_ARN \
            --container reely-api \
            --interactive \
            --command "python database.py"
        fi
    
    - name: Health check
      run: |
        # Get the load balancer DNS name
        LB_DNS=$(aws cloudformation describe-stacks \
          --stack-name reely-production-infrastructure \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        
        # Wait for health check to pass
        for i in {1..10}; do
          if curl -f -s "https://$LB_DNS/health"; then
            echo "Health check passed!"
            break
          else
            echo "Health check failed, attempt $i/10"
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "Health check failed after 10 attempts"
            exit 1
          fi
        done
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "Version: ${{ github.sha }}"
        echo "Environment: Production"
        # Could extend to send Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üéâ Reely deployed successfully to production!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        # Could extend to send Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå Reely deployment to production failed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Rollback to previous version
      run: |
        # Get the current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].taskDefinition' \
          --output text)
        
        # Get the revision number
        CURRENT_REVISION=$(echo $CURRENT_TASK_DEF | cut -d':' -f6)
        PREVIOUS_REVISION=$((CURRENT_REVISION - 1))
        
        if [ $PREVIOUS_REVISION -gt 0 ]; then
          # Rollback to previous revision
          PREVIOUS_TASK_DEF=$(echo $CURRENT_TASK_DEF | sed "s/:$CURRENT_REVISION/:$PREVIOUS_REVISION/")
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $PREVIOUS_TASK_DEF
          
          echo "Rolled back to revision $PREVIOUS_REVISION"
        else
          echo "No previous revision to rollback to"
        fi